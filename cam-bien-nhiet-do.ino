#include <WiFi.h>
#include <HTTPClient.h>
#include <DHT.h>

// Th√¥ng tin WiFi
const char* ssid = "Phuong Anh";
const char* password = "30032020";
const char* serverUrl = "http://192.168.0.11:5000/update";  

// C·∫•u h√¨nh c·∫£m bi·∫øn
#define DHTPIN 27
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// Ch√¢n c·∫£m bi·∫øn
#define LIGHT_SENSOR 34  
#define WATER_SENSOR 35  

void setup() {
    Serial.begin(115200);
    Serial2.begin(9600, SERIAL_8N1, 17, 16); // RX = D17, TX = D16
    dht.begin();  

    // K·∫øt n·ªëi WiFi
    WiFi.begin(ssid, password);
    Serial.print("üîÑ ƒêang k·∫øt n·ªëi WiFi...");
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) { 
        delay(500);
        Serial.print(".");
        attempts++;
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");
    } else {
        Serial.println("\n‚ùå K·∫øt n·ªëi WiFi th·∫•t b·∫°i! Ki·ªÉm tra SSID & Password.");
    }
}

void loop() {
    int soilMoisture = -1;

    // Nh·∫≠n d·ªØ li·ªáu ƒë·ªô ·∫©m ƒë·∫•t t·ª´ Arduino (qua UART)
    if (Serial2.available()) {
        int value = Serial2.parseInt();
        if (value > 0) {  // ƒê·∫£m b·∫£o gi√° tr·ªã h·ª£p l·ªá
            soilMoisture = value;
        }
    }

    // ƒê·ªçc c√°c c·∫£m bi·∫øn
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    int lightValue = analogRead(LIGHT_SENSOR);
    int waterLevel = analogRead(WATER_SENSOR);

    // Ki·ªÉm tra l·ªói DHT11
    if (isnan(temperature) || isnan(humidity)) {
        Serial.println("‚ùå L·ªói ƒë·ªçc c·∫£m bi·∫øn DHT11! Kh√¥ng g·ª≠i d·ªØ li·ªáu.");
        return;
    }

    // In ra Serial ƒë·ªÉ debug
    Serial.println("\nüì° D·ªØ li·ªáu c·∫£m bi·∫øn:");
    Serial.print("üå°Ô∏è Nhi·ªát ƒë·ªô: "); Serial.println(temperature);
    Serial.print("üíß ƒê·ªô ·∫©m kh√¥ng kh√≠: "); Serial.println(humidity);
    Serial.print("üå± ƒê·ªô ·∫©m ƒë·∫•t: "); Serial.println(soilMoisture);
    Serial.print("‚òÄÔ∏è √Ånh s√°ng: "); Serial.println(lightValue);
    Serial.print("üö∞ M·ª±c n∆∞·ªõc: "); Serial.println(waterLevel);

    // G·ª≠i d·ªØ li·ªáu n·∫øu WiFi v·∫´n k·∫øt n·ªëi
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        http.begin(serverUrl);
        http.addHeader("Content-Type", "application/json");

        // T·∫°o JSON d·ªØ li·ªáu
        String jsonData = "{";
        jsonData += "\"temperature\": " + String(temperature, 2) + ",";  // L√†m tr√≤n 2 ch·ªØ s·ªë
        jsonData += "\"humidity\": " + String(humidity, 2) + ",";
        jsonData += "\"soil_moisture\": " + String(soilMoisture) + ",";
        jsonData += "\"light\": " + String(lightValue) + ",";
        jsonData += "\"water_level\": " + String(waterLevel);
        jsonData += "}";

        Serial.println("üì§ G·ª≠i d·ªØ li·ªáu: " + jsonData);
        int httpResponseCode = http.POST(jsonData);
        // Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ server
        Serial.print("üì° M√£ ph·∫£n h·ªìi HTTP: ");
        Serial.println(httpResponseCode);

        if (httpResponseCode > 0) {
            Serial.println("‚úÖ D·ªØ li·ªáu ƒë√£ g·ª≠i th√†nh c√¥ng!");
        } else {
            Serial.println("‚ùå G·ª≠i d·ªØ li·ªáu th·∫•t b·∫°i!");
        }

        http.end();
    } else {
        Serial.println("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi WiFi! ƒêang ch·ªù k·∫øt n·ªëi l·∫°i...");
    }

    delay(5000);  // G·ª≠i d·ªØ li·ªáu m·ªói 5 gi√¢y
}